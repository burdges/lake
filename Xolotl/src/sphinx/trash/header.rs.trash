
fn prepend_to_slice(target: &mut [u8], prepend: &[u8]) {
    let start = prepend.len();
    if target.len() > start {
        let i = target.len();
        let target = &mut target[..i];  // elide bounds checks; see Rust commit 6a7bc47
        while i > start {
            i -= 1;
            target[i] = target[i-start];
        }
    }
    let start = ::std::cmp::min(start,target.len());
    target[0..start].copy_from_slice(prepend[0..start]);
}







/*
impl<'a> HeaderRefs<'a> {
    pub fn iter(&self) -> SphinxResult<impl Iterator> {
        if self.beta.len() != self.params.beta_length as usize {
            return Err( SphinxError::InternalError("Beta has incorrect length!") );
        }
        if self.surb_log.len() != self.params.surb_log_length as usize {
            return Err( SphinxError::InternalError("SURB log has incorrect length!") );
        }
        if self.surb.len() != self.params.surb_length() {
            return Err( SphinxError::InternalError("SURB has incorrect length!") );
        }
        Ok( self.alpha.iter()
            .chain(&*self.gamma)
            .chain(&*self.beta)
            .chain(&*self.surb_log)
            .chain(&*self.surb) )
    }
}
*/


