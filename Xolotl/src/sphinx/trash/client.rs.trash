
/*
/// Non-functional replay filter for Sphinx packet and SURB creation.
pub struct IgnoreReplays;


impl ::state::Filter for IgnoreReplays
  where K: Eq + Hash {
    type Key = ReplayCode;

    #[inline]
    fn new(_: HasherState) -> IgnoreReplays
        {  IgnoreReplays  }

    #[inline]
    fn contains<Q: ?Sized>(&self, value: &Q) -> bool
        where ReplayCode: Borrow<Q>, Q: Hash + Eq
        {  false  }

    #[inline]
    fn insert(&mut self, value: K) -> bool 
        {  true  }

    #[inline]
    fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool
        where K: Borrow<Q>, Q: Hash + Eq 
        {  false  }
}
*/


