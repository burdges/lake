
\section{Axolotl Mailboxes}

Fix an associative array of 512 bit constants c[body], c[box], etc.

All contact pairs maintain paired axolotl ratchet states that provide 
each with :
\begin{itemize}
\item  a list expected_prekeys of possible 256 bit values from which to derive keys, etc. for incoming messages, and 
\item  a single send_prekey value from which to derive keys, etc. for outgoing messages.
\end{itemize}
Receiving or sending messages changes these values.

Consider a contact pair Alice and Bob with Curve25519 key pairs Alice.key and Bob.key, respectively. 
Let cc[x] = sha512(c[x] ++ cc_lex) where
 cc_lex = concat( lex_order [Alice.key.pub,Bob.key.pub] )

Alice sends a message m_plaintext with send_prekey as follow.
- Let m_key = sha512( send_prekey ++ cc[body] )
- Let m_cypertext = secretbox.encrypt(m_plaintext, m_key)
- Let m_box = sha512( encrypt(send_prekey, Bob.key.pub) ++ cc[box] )
- Alice inserts m_cypertext into the anonymized DHT at location m_box
  (see AnonDHT.txt)
  Alice proves her benevolence for the DHT too (see benevolence.txt). 
- Let m_notice = sha512( encrypt(send_prekey, Alice.key.pub) ++ cc[notice] )
- Alice adds m_notice to her pending bloom filter semaphore along with 
  a time-stamp after her DHT request (see Bloomnotice.txt). 
  And submits her bloom filter semaphore whenever/however appropriate 




Bob listens to his mailboxes as follows.
- Let m_box_list = random_order [ sha512( encrypt(pk, C.key.pub) ++ cc[notice] ) : C <- contacts, pk <- C.ratchet. expected_prekeys ]
- Compute a list m_blooms of bloom filters made by adding elements of m_box_list so that no bloom filter was too sparse or dense.  
- For each element of m_blooms, Bob opens a distinct Tor hidden service connection to a notification server and requests any matching notifications since the last time he checked. 

Alice derives the actual encryption key k for sending a message by hashing e with some constant c1.  Alice derives Bob’s current mailbox m_b(e_a) = hash(encrypt(e_a,b_p)++c2) by encrypting e_a with Bob’s public key p_b and maybe hashing the result with another constant c2.  Bob occasionally checks all the mailboxes given by the list  map m_b ds_b  to see if Alice has any message for him.  If he finds one in mailbox m_b(x) then he decrypts it using hash(x++c1). 



